#!/usr/bin/env python3
# coding=utf-8
import time
from Arm_Lib import Arm_Device
import cv2

# Manually control the yahboom 6dof bot using sliders
# Generated by chat gpt may 24th free version

def nothing(x):
    pass

Arm = Arm_Device()
time.sleep(.1)

# Create a window for the trackbars and camera output
cv2.namedWindow("Control")

# Create trackbars
cv2.createTrackbar("angle1", "Control", 0, 180, nothing)
cv2.createTrackbar("angle2", "Control", 0, 180, nothing)
cv2.createTrackbar("angle3", "Control", 0, 180, nothing)
cv2.createTrackbar("angle4", "Control", 0, 180, nothing)
cv2.createTrackbar("angle5", "Control", 0, 180, nothing)
cv2.createTrackbar("angle6", "Control", 0, 180, nothing)

cv2.setTrackbarPos("angle1", "Control", 90)
cv2.setTrackbarPos("angle2", "Control", 90)
cv2.setTrackbarPos("angle3", "Control", 90)
cv2.setTrackbarPos("angle4", "Control", 90)
cv2.setTrackbarPos("angle5", "Control", 90)
cv2.setTrackbarPos("angle6", "Control", 90)

def interpolate(current_angle, target_angle, steps):
    """Interpolate between the current angle and target angle over a specified number of steps."""
    angle_step = (target_angle - current_angle) / steps
    angles = [current_angle + i * angle_step for i in range(steps + 1)]
    return angles

def main():
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Failed to open the video capture")
        return

    # Initialize current angles
    current_angle1 = 90
    current_angle2 = 90
    current_angle3 = 90
    current_angle4 = 90
    current_angle5 = 90
    current_angle6 = 90

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        cv2.imshow("Control", frame)

        angle1 = cv2.getTrackbarPos("angle1", "Control")
        angle2 = cv2.getTrackbarPos("angle2", "Control")
        angle3 = cv2.getTrackbarPos("angle3", "Control")
        angle4 = cv2.getTrackbarPos("angle4", "Control")
        angle5 = cv2.getTrackbarPos("angle5", "Control")
        angle6 = cv2.getTrackbarPos("angle6", "Control")

        # Set the number of steps for interpolation
        steps = 10

        # Interpolate the servo angles
        interpolated_angle1 = interpolate(current_angle1, angle1, steps)
        interpolated_angle2 = interpolate(current_angle2, angle2, steps)
        interpolated_angle3 = interpolate(current_angle3, angle3, steps)
        interpolated_angle4 = interpolate(current_angle4, angle4, steps)
        interpolated_angle5 = interpolate(current_angle5, angle5, steps)
        interpolated_angle6 = interpolate(current_angle6, angle6, steps)

        # Move the servos gradually
        for i in range(steps + 1):
            Arm.Arm_serial_servo_write(1, int(interpolated_angle1[i]), 10)
            Arm.Arm_serial_servo_write(2, int(interpolated_angle2[i]), 10)
            Arm.Arm_serial_servo_write(3, int(interpolated_angle3[i]), 10)
            Arm.Arm_serial_servo_write(4, int(interpolated_angle4[i]), 10)
            Arm.Arm_serial_servo_write(5, int(interpolated_angle5[i]), 10)
            Arm.Arm_serial_servo_write(6, int(interpolated_angle6[i]), 10)
            time.sleep(0.05)  # Adjust the delay between steps for smoother movement

        # Update the current angles
        current_angle1 = angle1
        current_angle2 = angle2
        current_angle3 = angle3
        current_angle4 = angle4
        current_angle5 = angle5
        current_angle6 = angle6

        if cv2.waitKey(1) == 27:  # Press 'Esc' to exit
            break

    cap.release()
    cv2.destroyAllWindows()

try:
    main()
except KeyboardInterrupt:
    print("Program closed!")
    pass

del Arm
